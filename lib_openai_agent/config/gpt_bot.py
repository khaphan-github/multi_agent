from config.main import config

# TODO: Move all this config to specific module
GPT_MODEL_CONFIG = [
    'gpt-3.5-turbo-0125',
    'gpt-4-1106-preview',
    'gpt-4-0125-preview',
    'gpt-4-turbo-preview',
    'gpt-4-turbo',
    'gpt-4o-mini',
    'gpt-4o',
]

GPT_BOTS_CONFIG = {
    # TODO: Need refactor code to config same same buddy web, mobile
    'learning_course': {
        'name': config.BUDDY_LEARNING_ASSISTANT_EDUZAA_FULLCOURSE_PREFIX,
        'temperature': 0.3,
        'metadata': {
            'version': '1',
            'tags': 'assistance_service',
        },
        'default_model': config.BUDDY_LEARNING_COURSE_MODEL_NAME,
        'desc': 'Model training khoa hoc theo kich ban',
        'sys_prompt': """
B·∫°n l√† Buddy AI, tr·ª£ l√Ω h·ªçc t·∫≠p c·ªßa Eduzaa, gi√∫p sinh vi√™n hi·ªÉu b√†i nhanh v√† √°p d·ª•ng ngay.¬†
1. Nhi·ªám v·ª• c·ªßa b·∫°n bao g·ªìm:
- Cung c·∫•p th√¥ng tin chi ti·∫øt:
Hi·ªÉu v√† tr·∫£ l·ªùi ch√≠nh x√°c v·ªÅ n·ªôi dung kh√≥a h·ªçc, bao g·ªìm: m·ª•c ti√™u, l·ªãch h·ªçc, th·ªùi l∆∞·ª£ng, gi·∫£ng vi√™n, h·ªçc ph√≠, t√†i li·ªáu, v√† y√™u c·∫ßu ƒë·∫ßu v√†o.
N·∫øu ng∆∞·ªùi d√πng cung c·∫•p th√¥ng tin kh√¥ng r√µ r√†ng, b·∫°n c·∫ßn ƒë·∫∑t c√¢u h·ªèi ƒë·ªÉ l√†m r√µ y√™u c·∫ßu tr∆∞·ªõc khi tr·∫£ l·ªùi.
2. M·ªôt kh√≥a h·ªçc c√≥ nhi·ªÅu b√†i h·ªçc chi ti·∫øt h∆°n, nhi·ªám v·ª• c·ªßa b·∫°n ch·ªâ tr·∫£ l·ªùi th√¥ng tin li√™n quan ƒë·∫øn b√†i h·ªçc chi ti·∫øt,
3. ƒê√¢y l√† danh s√°ch t·ª´ng t√†i h·ªçc n·∫±m trong kh√≥a:¬†
{phu_luc}

üìå **Nguy√™n t·∫Øc ph·∫£n h·ªìi:**¬†¬†
1Ô∏è‚É£ **∆Øu ti√™n tr·∫£ l·ªùi s√°t n·ªôi dung b√†i h·ªçc tr∆∞·ªõc ti√™n** üìö¬†¬†
Tr·∫£ l·ªùi ng·∫Øn g·ªçn, kh√¥ng d√†i d√≤ng, kh√¥ng lan man, t·ªëi ƒëa 50-80 t·ª´ (trong tr∆∞·ªùng h·ª£p th·∫≠t c·∫ßn thi·∫øt m·ªõi tr·∫£ l·ªùi d√†i h∆°n, n·∫øu c√≥ th·ªÉ h√£y ng·∫Øn g·ªçn d√≠ d·ªèm trong 1 v√†i c√¢u ng·∫Øn), gi·ªçng ƒëi·ªáu th√¢n thi·ªán, d√≠ d·ªèm nh∆∞ b·∫°n c√πng l·ªõp.¬†¬†¬†

2Ô∏è‚É£ **N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn b√†i h·ªçc** ‚Üí **Tr·∫£ l·ªùi ng·∫Øn g·ªçn, d√≠ d·ªèm nh∆∞ng l∆∞u √Ω ng∆∞·ªùi h·ªçc l√† h·ªç ƒëang h·ªèi ngo√†i b√†i h·ªçc**¬†¬†
B·∫°n l√† Buddy, tr·ª£ l√Ω AI gi√∫p sinh vi√™n h·ªçc k·ªπ nƒÉng nhanh h∆°n vui h∆°n, d·ªÖ h∆°n. B·∫°n kh√¥ng ph·∫£i tr·ª£ l√Ω to√†n nƒÉng. Do ƒë√≥ nh·ªØng c√¢u h·ªèi ngo√†i c√°c b√†i h·ªçc v√† c√°c ch·ªß ƒë·ªÅ: [k·ªπ nƒÉng h·ªçc t·∫≠p, ngh·ªÅ nghi·ªáp, k·ªπ nƒÉng m·ªÅm, c√¥ng c·ª• s·ªë, ƒë·ªùi s·ªëng sinh vi√™n], h√£y d√≠ d·ªèm v√† kh√©o l√©o chuy·ªÉn ƒë·ªÅ t√†i v·ªÅ c√°c ch·ªß ƒë·ªÅ tr√™n.
        """
    },
}


'''
LEARNING_COURSE
Cau hinh cac prompt cho cac action cua bot learning course
kem voi learning_course o tren
'''


def generate_assistant_prompt(course_name, course_content_plain_text, custom_prompt=''):
    '''
        Noi dung build thong tin bo xung cua asisstance cua chi tiet bai hoc
    '''
    if not course_name or not course_content_plain_text:
        return "N·ªôi dung b√†i h·ªçc ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t"

    if len(custom_prompt) > 0:
        return custom_prompt.replace('{course_name}', course_name).replace('{course_content_plain_text}', course_content_plain_text)

    return f'''
D∆∞·ªõi ƒë√¢y l√† th√¥ng tin chi ti·∫øt c·ªßa b√†i h·ªçc:
1. Ti√™u ƒë·ªÅ c·ªßa b√†i h·ªçc: {course_name}.
2. N·ªôi dung: {course_content_plain_text}.
B·∫°n c·∫ßn t√¥i h·ªó tr·ª£ g√¨ th√™m kh√¥ng? 
T√¥i c√≥ th·ªÉ t·∫°o b√†i t·∫≠p, t√≥m t·∫Øt n·ªôi dung b√†i h·ªçc n√†y v√† gi·∫£i th√≠ch th√™m nh·ªØng √Ω b·∫°n ch∆∞a n·∫Øm r√µ.
N·∫øu c·∫ßn h√£y cho t√¥i bi·∫øt nh√©.
    '''


def generate_assistant_action_tom_tat_prompt(course_item_name, custom_prompt=''):
    if len(custom_prompt) > 0:
        return custom_prompt.replace('{course_item_name}', course_item_name)

    return f'''
B·∫°n h√£y t√≥m t·∫Øt cho t√¥i b√†i h·ªçc: {course_item_name}.
    '''


def generate_assistant_action_tom_tat_again_prompt(course_item_name, custom_prompt=''):
    if len(custom_prompt) > 0:
        return custom_prompt.replace('{course_item_name}', course_item_name)

    return f'''
B·∫°n h√£y t√≥m t·∫Øt cho t√¥i b√†i h·ªçc: {course_item_name}.
    '''


def generate_assistant_action_giai_thich_them_prompt(course_item_name, custom_prompt=''):
    if len(custom_prompt) > 0:
        return custom_prompt.replace('{course_item_name}', course_item_name)

    return f'''
Sinh vi√™n mu·ªën hi·ªÉu nhanh v·ªÅ n·ªôi dung b√†i h·ªçc sau. H√£y cung c·∫•p m·ªôt l·ªùi gi·∫£i th√≠ch, t√≥m t·∫Øt c·ª±c k·ª≥ ng·∫Øn g·ªçn, d·∫°ng danh s√°ch, kho·∫£ng 50-80 t·ª´. L∆∞u √Ω quan tr·ªçng: kh√¥ng d√†i d√≤ng lan man, ch·ªâ 50-80 t·ª´.
Y√™u c·∫ßu:
- Gi·∫£i th√≠ch, t√≥m t·∫Øt ng·∫Øn g·ªçn, ƒë·ªçc ƒë∆∞·ª£c nhanh.
- T√¥ ƒë·∫≠m nh·ªØng ch·ªó quan tr·ªçng
N·ªôi dung b√†i h·ªçc: {course_item_name}
    '''


def generate_assistant_action_giai_thich_them_again_prompt(course_item_name, custom_prompt=''):
    if len(custom_prompt) > 0:
        return custom_prompt.replace('{course_item_name}', course_item_name)

    return f'''
B·∫°n h√£y gi·∫£i th√≠ch th√™m cho t√¥i v·ªÅ b√†i h·ªçc: {course_item_name}. H√£y cung c·∫•p m·ªôt l·ªùi gi·∫£i th√≠ch th√™m c·ª±c k·ª≥ ng·∫Øn g·ªçn, d·∫°ng danh s√°ch, kho·∫£ng 50-80 t·ª´, k√®m theo v√≠ d·ª• minh h·ªça ho·∫∑c ·ª©ng d·ª•ng th·ª±c t·∫ø n·∫øu c√≥. L∆∞u √Ω quan tr·ªçng: kh√¥ng d√†i d√≤ng lan man, ch·ªâ 50-80 t·ª´.
    '''


def generate_assistant_action_bai_tap_prompt(course_item_name, custom_prompt=''):
    if len(custom_prompt) > 0:
        return custom_prompt.replace('{course_item_name}', course_item_name)
    return f'''
        B·∫°n h√£y t·∫°o b√†i t·∫≠p cho b√†i h·ªçc: {course_item_name}
        1. Cho t√¥i danh s√°ch b√†i t·∫≠p cho kh√≥a h·ªçc n√†y g·ªìm 10 b√†i t·∫≠p tr·∫Øc nghi·ªáp k√®m ƒë√°p √°n v√† gi·∫£i th√≠ch
        2. Lu√¥n lu√¥n tr·∫£ v·ªÅ d·ªØ li·ªáu d∆∞·ªõi d·∫°ng JSON v·ªõi c·∫•u tr√∫c sau: 
            [  
                {
                "id": 1,
                "noi_dung": "\"Do yoga\" c√≥ nghƒ©a l√† g√¨?",
                "selection": [
                    {
                        "key": "a",
                        "noi_dung": "Ch∆°i th·ªÉ thao"
                    },
                    {
                        "key": "b",
                        "noi_dung": "T·∫≠p gym"
                    },
                    {
                        "key": "c",
                        "noi_dung": "T·∫≠p yoga"
                    },
                    {
                        "key": "d",
                        "noi_dung": "Ch·∫°y b·ªô 1"
                    }
                ],
                "dap_an": "c"
                },
            ]
        C√°c key trong json n√†y ƒë∆∞·ª£c m√¥ t·∫£ nh∆∞ sau:
            - id: S·ªë th·ª© t·ª± c·ªßa c√¢u h·ªèi
            - noi_dung: N·ªôi dung c√¢u h·ªèi
            - selection: C√°c l·ª±a ch·ªçn cho c√¢u h·ªèi: 
                + key: M√£ l·ª±a ch·ªçn
                + noi_dung: N·ªôi dung l·ª±a ch·ªçn
            - dap_an: ƒê√°p √°n ƒë√∫ng c·ªßa c√¢u h·ªèi
'''


def user_query_builder(user_query, custom_prompt=''):
    if len(custom_prompt) > 0:
        return custom_prompt.replace('{user_query}', user_query)
    return f'''
       {user_query}
    '''


# TODO: Update config for learning course TRA VE SJON
# user_query: dtruong hop user quest prompt
LEARNING_COURSE_ACTION_KEY_CONFIG = {
    'bai_tap': {
        'response_type': 'json',
        'new_action_prompt': generate_assistant_action_bai_tap_prompt,
        'action_prompt': generate_assistant_action_bai_tap_prompt,
        'display_prompt': '''T·∫°o tr·∫Øc nghi·ªám''',
        'assistant_prompt': generate_assistant_prompt,
    },
    'tom_tat': {
        'response_type': 'text',
        'action_prompt': generate_assistant_action_tom_tat_again_prompt,
        'new_action_prompt': generate_assistant_action_tom_tat_prompt,
        'display_prompt': '''Gi√∫p t√¥i t√≥m t·∫Øt n·ªôi dung c·ªßa b√†i h·ªçc n√†y''',
        'assistant_prompt': generate_assistant_prompt,
    },
    'giai_thich_them': {
        'response_type': 'text',
        'action_prompt': generate_assistant_action_giai_thich_them_again_prompt,
        'new_action_prompt': generate_assistant_action_giai_thich_them_prompt,
        'display_prompt': '''H√£y gi√∫p t√¥i gi·∫£i th√≠ch th√™m n·ªôi dung c·ªßa b√†i h·ªçc n√†y''',
        'assistant_prompt': generate_assistant_prompt,
    },
    'user_query': {
        'response_type': 'text',
        'action_prompt': user_query_builder,
        'new_action_prompt': user_query_builder,
        'display_prompt': '''''',
        'assistant_prompt': generate_assistant_prompt,
    },
}
